2019-05-28  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	* config/riscv32/boards/ri5cyverilator/boardsupport.c
	(initialise_board, start_trigger, stop_trigger): Put a no-op
	instruction in to work around a RI5CY issue with restaring on rtn
	instructions.
	* doc/beebs.info: Regenerated.
	* testsuite/config/ri5cyverilator.exp: Switch to command rather
	than MI mode for clarity and fix matches to handle results of
	fixed gdbserver.

2019-05-24  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	Remove janne_complex and tarai from Embench, since they are too
	small and synthetic. Add huffbench from BEEBS, to include a
	compression program in Embench.

	* configure: Regenerated.
	* configure.ac: Remove janne_complex and tarai, add huffbench.
	* src/Makefile.am: Likewise.
	* src/Makefile.in: Regenerated.
	* src/edn/Makefile.am: Fix layout.
	* src/edn/Makefile.in: Regenerated.
	* src/huffbench/.gitignore: Created.
	* src/huffbench/Makefile.am: Created.
	* src/huffbench/Makefile.in: Generated.
	* src/huffbench/libhuffbench.c: Created.
	* janne_complex/Makefile.am: Deleted.
	* janne_complex/Makefile.in: Deleted.
	* janne_complex/libjanne_complex.c: Deleted.
	* src/sglib-dllist/Makefile.am: Fix layout.
	* src/sglib-dllist/Makefile.in: Regenerated.
	* tarai/Makefile.am: Deleted.
	* tarai/libtarai.c: Deleted.

2019-05-23  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	Code for all benchmarks modified to provide a warmup function, to
	allow the caches to be warmed up before we run the benchmark.
	Move all benchmark functions to benchmark_body with a loop counter
	and rewrite benchmark to call benchmark_body with the correct loop
	counter.  Make benchmark_body noinline, so both warmup and
	benchmark invoke the same code and hence warm up the caches
	correctly.

	Provide --enable-warmup function to specify the number of warmup
	loops required, defaulting to 1.

	Wwitch to be better generic functions for initialize_board,
	start_trigger and stop_trigger.

	Adjust LOCAL_SCALE to get timings as close to 4M cycles
	using RI5CY verilator model and GCC with -O2.

	* config.h.in: Regenerated.
	* config/riscv32/boards/ri5cyverilator/boardsupport.c
	(initialise_board, start_trigger, stop_trigger): Use different
	form of asm to prevent exclusion without needing any instruction.
	* configure: Regenerated.
	* configure.ac: Add --enable-warmup option to set warmup loops.
	* src/aha-mont64/mont64.c (warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/crc32/crc_32.c (warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/cubic/basicmath_small.c (warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/edn/libedn.c: Adjust LOCAL_SCALE to correct value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/janne_complex/libjanne_complex.c: Adjust LOCAL_SCALE to
	correct value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/matmult-int/matmult-int.c (warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/minver/libminver.c: Adjust LOCAL_SCALE to correct value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/nbody/nbody.c (warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/nettle-aes/nettle-aes.c: Adjust LOCAL_SCALE to correct
	value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/nettle-sha256/nettle-sha256.c: Adjust LOCAL_SCALE to correct
	value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/nsichneu/libnsichneu.c: Adjust LOCAL_SCALE to correct value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/picojpeg/picojpeg_test.c: Adjust LOCAL_SCALE to correct
	value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/qrduino/qrtest.c (warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/sglib-arrayquicksort/arrayquicksort.c: Adjust LOCAL_SCALE to
	correct value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/sglib-dllist/dllist.c: Adjust LOCAL_SCALE to correct value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/sglib-hashtable/hashtable.c: Adjust LOCAL_SCALE to correct
	value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/sglib-queue/queue.c: Adjust LOCAL_SCALE to correct value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/sglib-rbtree/rbtree.c: Adjust LOCAL_SCALE to correct value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/slre/libslre.c: Adjust LOCAL_SCALE to correct value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/st/libst.c: Adjust LOCAL_SCALE to correct value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/statemate/libstatemate.c: Adjust LOCAL_SCALE to correct
	value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/tarai/libtarai.c (warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/ud/libud.c: Adjust LOCAL_SCALE to correct value.
	(warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* src/wikisort/libwikisort.c (warm_caches): Created.
	(benchmark): Modified as wrapper to benchmark_body which is the
	orignal function.
	(benchmark_body): Renamed from original benchmark function and
	made no_inline
	(initialise_benchmark): Correctly C prototype for the function.
	* support/Makefile.am: Remove reference to ARM_MILLICODE
	* support/Makefile.in: Regenerated.
	* support/main.c (main): Remove extern declaraations, add
	warm_caches to warm up the caches.
	* support/support.h: Add declarations of initialize_benchmark,
	warm_caches and verify_benchmark.

2019-05-09  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	A general simplification of the benchmark wide scaling.

	We get rid of CALIB_SCALE (benchmark specific calibration for
	particular benchmarks on particular boards). We also replace
	BOARD_REPEAT_FACTOR with CPU_MHZ (a board parameter).  There is
	then no need to compute REPEAT_FACTOR in support.h, we can just
	use CPU_MHz in the benchmarks.

	* .gitignore: Created.
	* README: Created as symbolic link to README.md to keep autotools
	happy.
	* config/riscv32/boards/generic/boardsupport.h: Change
	BOARD_REPEAT_FACTOR to CPU_MHZ and give value 1.
	* config/riscv32/boards/picorv32verilator/boardsupport.h:
	Likewise.
	* config/riscv32/boards/ri5cyverilator/boardsupport.h: Change
	BOARD_REPEAT_FACTOR to CPU_MHZ.
	* doc/beebs.info: Regenerated.
	* doc/beebs.texi: Change BOARD_REPEAT_FACTOR to CPU_MHZ.
	* src/aha-mont64/Makefile.in: Regenerated.
	* src/aha-mont64/mont64.c (benchmark): Change REPEAT_FACTOR to
	CPU_MHZ.
	* src/common.mk.am: Remove calibration calculation and definition
	of CALIB_SCALE.
	* src/crc32/Makefile.in: Regenerated.
	* src/crc32/crc_32.c (benchmark): Change REPEAT_FACTOR to CPU_MHZ.
	* src/cubic/Makefile.in: Regenerated.
	* src/cubic/basicmath_small.c (benchmark): Change REPEAT_FACTOR to
	CPU_MHZ.
	* src/edn/Makefile.in: Regenerated.
	* src/edn/libedn.c (benchmark): Change REPEAT_FACTOR to CPU_MHZ.
	* src/janne_complex/Makefile.in: Regenerated.
	* src/janne_complex/libjanne_complex.c (benchmark): Change
	REPEAT_FACTOR to CPU_MHZ.
	* src/matmult-int/Makefile.in: Regenerated.
	* src/matmult-int/matmult-int.c (benchmark): Change REPEAT_FACTOR
	to CPU_MHZ.
	* src/minver/Makefile.in: Regenerated.
	* src/minver/libminver.c (benchmark): Change REPEAT_FACTOR to
	CPU_MHZ.
	* src/nbody/Makefile.in: Regenerated.
	* src/nbody/nbody.c (benchmark): Change REPEAT_FACTOR to CPU_MHZ.
	* src/nettle-aes/Makefile.in: Regenerated.
	* src/nettle-aes/nettle-aes.c (benchmark): Change REPEAT_FACTOR to
	CPU_MHZ.
	* src/nettle-sha256/Makefile.in: Regenerated.
	* src/nettle-sha256/nettle-sha256.c (benchmark): Change
	REPEAT_FACTOR to CPU_MHZ.
	* src/nsichneu/Makefile.in: Regenerated.
	* src/nsichneu/libnsichneu.c (benchmark): Change REPEAT_FACTOR to
	CPU_MHZ.
	* src/picojpeg/Makefile.in: Regenerated.
	* src/picojpeg/picojpeg_test.c (benchmark): Change REPEAT_FACTOR
	to CPU_MHZ.
	* src/qrduino/Makefile.in: Regenerated.
	* src/qrduino/qrtest.c (benchmark): Change REPEAT_FACTOR to
	CPU_MHZ.
	* src/sglib-arrayquicksort/Makefile.in: Regenerated.
	* src/sglib-arrayquicksort/arrayquicksort.c (benchmark): Change
	REPEAT_FACTOR to CPU_MHZ.
	* src/sglib-dllist/Makefile.in: Regenerated.
	* src/sglib-dllist/dllist.c (benchmark): Change REPEAT_FACTOR to
	CPU_MHZ.
	* src/sglib-hashtable/Makefile.in: Regenerated.
	* src/sglib-hashtable/hashtable.c (benchmark): Change
	REPEAT_FACTOR to CPU_MHZ.
	* src/sglib-queue/Makefile.in: Regenerated.
	* src/sglib-queue/queue.c (benchmark): Change REPEAT_FACTOR to
	CPU_MHZ.
	* src/sglib-rbtree/Makefile.in: Regenerated.
	* src/sglib-rbtree/rbtree.c (benchmark): Change REPEAT_FACTOR to
	CPU_MHZ.
	* src/slre/Makefile.in: Regenerated.
	* src/slre/libslre.c (benchmark): Change REPEAT_FACTOR to CPU_MHZ.
	* src/st/Makefile.in: Regenerated.
	* src/st/libst.c (benchmark): Change REPEAT_FACTOR to CPU_MHZ.
	* src/statemate/Makefile.in: Regenerated.
	* src/statemate/libstatemate.c (benchmark): Change REPEAT_FACTOR
	to CPU_MHZ.
	* src/tarai/Makefile.in: Regenerated.
	* src/tarai/libtarai.c (benchmark): Change REPEAT_FACTOR to
	CPU_MHZ.
	* src/ud/Makefile.in: Regenerated.
	* src/ud/libud.c (benchmark): Change REPEAT_FACTOR to CPU_MHZ.
	* src/wikisort/Makefile.in: Regenerated.
	* src/wikisort/libwikisort.c (benchmark): Change REPEAT_FACTOR to
	CPU_MHZ.
	* support/support.h: Remove all calculation of REPEAT_FACTOR,
	which is replaced by a single figure, CPU_MHZ.

2019-05-09  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	Provide a more appropriate README.

	* README: Renamed to README.md.
	* README.md: Renamed from README and updated with details
	appropriate to Embench.

2019-04-28  Jeremy Bennett  <jeremy.bennett@embecosm.com>

	Initial commit as a snapshot from the main BEEBS repo at
	https://github.com/mageec/beebs.

	* AUTHORS: Created.
	* COPYING: Created.
	* ChangeLog: Created.
	* INSTALL: Created.
	* Makefile.am: Created.
	* Makefile.in: Created.
	* NEWS: Created.
	* README: Created.
	* aclocal.m4: Created.
	* compile: Created.
	* config.guess: Created.
	* config.h.in: Created.
	* config.sub: Created.
	* config/default.exp: Created.
	* config/riscv32/boards/generic/boardsupport.c: Created.
	* config/riscv32/boards/generic/boardsupport.h: Created.
	* config/riscv32/boards/picorv32verilator/boardsupport.c: Created.
	* config/riscv32/boards/picorv32verilator/boardsupport.h: Created.
	* config/riscv32/boards/ri5cyverilator/boardsupport.c: Created.
	* config/riscv32/boards/ri5cyverilator/boardsupport.h: Created.
	* config/riscv32/chips/picorv32/chip.cfg: Created.
	* config/riscv32/chips/picorv32/chipsupport.c: Created.
	* config/riscv32/chips/picorv32/chipsupport.h: Created.
	* config/riscv32/chips/picorv32/picorv32.ld: Created.
	* config/riscv32/chips/picorv32/picorv32.spec: Created.
	* config/riscv32/chips/ri5cy/chip.cfg: Created.
	* config/riscv32/chips/ri5cy/chipsupport.c: Created.
	* config/riscv32/chips/ri5cy/chipsupport.h: Created.
	* config/riscv32/chips/size-test/chip.cfg: Created.
	* config/riscv32/chips/size-test/chipsupport.c: Created.
	* config/riscv32/chips/size-test/chipsupport.h: Created.
	* config/riscv32/chips/speed-test/chip.cfg: Created.
	* config/riscv32/chips/speed-test/chipsupport.c: Created.
	* config/riscv32/chips/speed-test/chipsupport.h: Created.
	* configure: Created.
	* configure.ac: Created.
	* depcomp: Created.
	* doc/Makefile.am: Created.
	* doc/Makefile.in: Created.
	* doc/beebs.info: Created.
	* doc/beebs.texi: Created.
	* doc/config.texi: Created.
	* doc/fdl-1.2.texi: Created.
	* doc/mdate-sh: Created.
	* doc/stamp-vti: Created.
	* doc/texinfo.tex: Created.
	* doc/version.texi: Created.
	* install-sh: Created.
	* ltmain.sh: Created.
	* m4/libtool.m4: Created.
	* m4/ltoptions.m4: Created.
	* m4/ltsugar.m4: Created.
	* m4/ltversion.m4: Created.
	* m4/lt~obsolete.m4: Created.
	* missing: Created.
	* src/Makefile.am: Created.
	* src/Makefile.in: Created.
	* src/aha-mont64/Makefile.am: Created.
	* src/aha-mont64/Makefile.in: Created.
	* src/aha-mont64/mont64.c: Created.
	* src/common.mk.am: Created.
	* src/crc32/Makefile.am: Created.
	* src/crc32/Makefile.in: Created.
	* src/crc32/crc_32.c: Created.
	* src/cubic/Makefile.am: Created.
	* src/cubic/Makefile.in: Created.
	* src/cubic/basicmath_small.c: Created.
	* src/cubic/libcubic.c: Created.
	* src/cubic/pi.h: Created.
	* src/cubic/snipmath.h: Created.
	* src/cubic/sniptype.h: Created.
	* src/edn/Makefile.am: Created.
	* src/edn/Makefile.in: Created.
	* src/edn/libedn.c: Created.
	* src/janne_complex/Makefile.am: Created.
	* src/janne_complex/Makefile.in: Created.
	* src/janne_complex/libjanne_complex.c: Created.
	* src/matmult-int/Makefile.am: Created.
	* src/matmult-int/Makefile.in: Created.
	* src/matmult-int/matmult-int.c: Created.
	* src/minver/Makefile.am: Created.
	* src/minver/Makefile.in: Created.
	* src/minver/libminver.c: Created.
	* src/nbody/Makefile.am: Created.
	* src/nbody/Makefile.in: Created.
	* src/nbody/nbody.c: Created.
	* src/nettle-aes/Makefile.am: Created.
	* src/nettle-aes/Makefile.in: Created.
	* src/nettle-aes/nettle-aes.c: Created.
	* src/nettle-sha256/Makefile.am: Created.
	* src/nettle-sha256/Makefile.in: Created.
	* src/nettle-sha256/nettle-sha256.c: Created.
	* src/nsichneu/Makefile.am: Created.
	* src/nsichneu/Makefile.in: Created.
	* src/nsichneu/libnsichneu.c: Created.
	* src/picojpeg/Makefile.am: Created.
	* src/picojpeg/Makefile.in: Created.
	* src/picojpeg/libpicojpeg.c: Created.
	* src/picojpeg/picojpeg.h: Created.
	* src/picojpeg/picojpeg_test.c: Created.
	* src/qrduino/Makefile.am: Created.
	* src/qrduino/Makefile.in: Created.
	* src/qrduino/ecctable.h: Created.
	* src/qrduino/qrbits.h: Created.
	* src/qrduino/qrencode.c: Created.
	* src/qrduino/qrencode.h: Created.
	* src/qrduino/qrframe.c: Created.
	* src/qrduino/qrtest.c: Created.
	* src/sglib-arrayquicksort/Makefile.am: Created.
	* src/sglib-arrayquicksort/Makefile.in: Created.
	* src/sglib-arrayquicksort/arrayquicksort.c: Created.
	* src/sglib-arrayquicksort/sglib.h: Created.
	* src/sglib-dllist/Makefile.am: Created.
	* src/sglib-dllist/Makefile.in: Created.
	* src/sglib-dllist/dllist.c: Created.
	* src/sglib-dllist/sglib.h: Created.
	* src/sglib-hashtable/Makefile.am: Created.
	* src/sglib-hashtable/Makefile.in: Created.
	* src/sglib-hashtable/hashtable.c: Created.
	* src/sglib-hashtable/sglib.h: Created.
	* src/sglib-queue/Makefile.am: Created.
	* src/sglib-queue/Makefile.in: Created.
	* src/sglib-queue/queue.c: Created.
	* src/sglib-queue/sglib.h: Created.
	* src/sglib-rbtree/Makefile.am: Created.
	* src/sglib-rbtree/Makefile.in: Created.
	* src/sglib-rbtree/rbtree.c: Created.
	* src/sglib-rbtree/sglib.h: Created.
	* src/slre/Makefile.am: Created.
	* src/slre/Makefile.in: Created.
	* src/slre/libslre.c: Created.
	* src/slre/slre.h: Created.
	* src/st/Makefile.am: Created.
	* src/st/Makefile.in: Created.
	* src/st/libst.c: Created.
	* src/statemate/Makefile.am: Created.
	* src/statemate/Makefile.in: Created.
	* src/statemate/libstatemate.c: Created.
	* src/tarai/Makefile.am: Created.
	* src/tarai/Makefile.in: Created.
	* src/tarai/libtarai.c: Created.
	* src/ud/Makefile.am: Created.
	* src/ud/Makefile.in: Created.
	* src/ud/libud.c: Created.
	* src/wikisort/Makefile.am: Created.
	* src/wikisort/Makefile.in: Created.
	* src/wikisort/libwikisort.c: Created.
	* support/Makefile.am: Created.
	* support/Makefile.in: Created.
	* support/arc-millicode.S: Created.
	* support/beebsc.c: Created.
	* support/beebsc.h: Created.
	* support/board.c: Created.
	* support/chip.c: Created.
	* support/dummy-crt0.c: Created.
	* support/dummy-libc.c: Created.
	* support/dummy-libgcc.c: Created.
	* support/dummy-libm.c: Created.
	* support/main.c: Created.
	* support/support.h: Created.
